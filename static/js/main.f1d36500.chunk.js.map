{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","searchTerm","setSearchterm","className","placeholder","onChange","event","target","value","onClick","onSearch","console","log","Track","track","onAdd","onRemove","isRemoval","addTrack","removeTrack","name","artist","album","renderAction","TrackList","tracks","map","id","searchResults","Playlist","accessToken","defaultValue","e","onNameChange","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","setsearchResults","playlistName","setplaylistName","setPlaylistTracks","a","results","find","savedTrack","prev","filter","prevTrack","playname","trackURIs","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1d36500.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './SearchBar.css';\r\nimport { useState } from \"react\";\r\n\r\nfunction SearchBar(props){\r\n    const [searchTerm, setSearchterm] = useState(\"\")\r\n    function search(){\r\n        props.onSearch(searchTerm);\r\n        console.log(searchTerm);\r\n    }\r\n    function handleTermChange(event){\r\n        setSearchterm(event.target.value);\r\n    }\r\n    return(\r\n        <div className=\"SearchBar\">\r\n            <input placeholder=\"Enter A Song, Album, or Artist\" onChange={handleTermChange}/>\r\n            <button className=\"SearchButton\" onClick={search}>SEARCH</button>\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBar;","import React from \"react\";\r\nimport './Track.css';\r\nimport { useCallback } from 'react';\r\n\r\nfunction Track({ track, onAdd, onRemove, isRemoval }){\r\n    const addTrack = () => {\r\n        onAdd(track);\r\n      };\r\n    \r\n      const removeTrack = () => {\r\n        onRemove(track);\r\n      };\r\n    \r\n      const renderAction = (isRemoval) =>\r\n        isRemoval ? (\r\n          <button onClick={removeTrack} className=\"Track-action\">\r\n            -\r\n          </button>\r\n        ) : (\r\n          <button onClick={addTrack} className=\"Track-action\">\r\n            +\r\n          </button>\r\n        );\r\n\r\n    return(\r\n        <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n                <h3>{track.name}</h3>\r\n                <p>{track.artist} | {track.album}</p>\r\n            </div>\r\n            <button className=\"Track-action\">{renderAction(isRemoval)}</button>\r\n        </div>\r\n    );\r\n}\r\nexport default Track;","import React from \"react\";\r\nimport './TrackList.css';\r\nimport Track from \"../Track/Track\";\r\n\r\nfunction TrackList(props){\r\n    return(\r\n        <div className=\"TrackList\">\r\n            {\r\n            props.tracks.map((tracks)=>\r\n                    {\r\n                        return <Track track={tracks} key={tracks.id} onAdd={props.onAdd} onRemove={props.onRemove} isRemoval={props.isRemoval} /> \r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default TrackList;","import React from \"react\";\r\nimport './SearchResults.css';\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nfunction SearchBar(props){\r\n    return(\r\n        <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList tracks ={props.searchResults} isRemoval={false} onAdd={props.onAdd}/> \r\n        </div>\r\n    );\r\n}\r\nexport default SearchBar","import React from \"react\";\r\nimport './Playlist.css'\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nfunction Playlist(props){\r\n    const handleNameChange = (e) => {\r\n        props.onNameChange(e.target.value);\r\n      };\r\n    return(\r\n        <div className=\"Playlist\">\r\n            <input defaultValue={'New Playlist'} onChange={handleNameChange}/>\r\n            <TrackList tracks={props.playlistTracks} onRemove={props.onRemove} isRemoval={true}/>\r\n            <button className=\"Playlist-save\" onClick={props.onSave}>SAVE TO SPOTIFY</button>\r\n        </div>\r\n    );\r\n}\r\nexport default Playlist;","let accessToken;\r\nconst clientId=\"3ca849b4c2664035983dfb7f4925df4d\";\r\nconst redirectURI= \"https://rohitkatbamna.surge.sh/\";\r\n\r\nconst Spotify ={ \r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken;\r\n        }\r\n\r\n        const accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);\r\n        if(accessTokenMatch && expiresInMatch){\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = expiresInMatch[1];\r\n            console.log(accessTokenMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n        }\r\n        else{\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\r\n            window.location=accessUrl;\r\n        }\r\n    },\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n          }\r\n        }).then(response => {\r\n          return response.json();\r\n        }).then(jsonResponse => {\r\n          if (!jsonResponse.tracks) {\r\n            return [];\r\n          }\r\n          return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n          }));\r\n        });\r\n      },\r\n      savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n          return;\r\n        }\r\n    \r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n    \r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n          userId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({name: name})\r\n          }).then(response => response.json()\r\n          ).then(jsonResponse => {\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n              headers: headers,\r\n              method: 'POST',\r\n              body: JSON.stringify({uris: trackUris})\r\n            });\r\n          });\r\n        });\r\n      }\r\n  \r\n};\r\n\r\nexport default Spotify;\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nfunction App() {\n  \n  const [searchResults, setsearchResults] = useState([{name:'name1', artist:'artist1', album:'album1', id:1}, \n  {name:'name2', artist:'artist2', album:'album2', id:2},{name:'name3', artist:'artist3', album:'album3', id:3},\n  {name:'name4', artist:'artist4', album:'album4', id:4}])\n  \n  const [playlistName, setplaylistName] = useState('MyPlaylist');\n  \n  const [playlistTracks, setPlaylistTracks] = useState([{name:'playlistname1', artist:'playlistartist1', album:'playlistalbum1', id:1}, \n  {name:'playlistname2', artist:'playlistartist2', album:'playlistalbum2', id:2},{name:'playlistname3', artist:'playlistartist3', album:'playlistalbum3', id:3},\n  {name:'playlistname4', artist:'playlistartist4', album:'playlistalbum4', id:4}]);\n  \n  const addTrack = (track) => {\n    // check if the track is already in the playlist\n    if (playlistTracks.find((savedTrack) => track.id === savedTrack.id)) {\n      return; //aka do nothing!\n    }\n    setPlaylistTracks((prev) => [track, ...prev]);\n  };\n\n  const removeTrack = (track) => {\n    setPlaylistTracks((prev) =>\n      prev.filter((prevTrack) => prevTrack.id !== track.id)\n    );\n  };\n  function updatePlaylistName(playname){\n    setplaylistName(playname)\n\n  }\n  function savePlaylist(){\n    const trackURIs= playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(playlistName,trackURIs )\n    .then(() => {\n      setplaylistName({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n      });\n    }\n  \n  const search = async (term) => {\n    const results = await Spotify.search(term);\n    setsearchResults(results);\n    console.log(results);\n  };\n\n  return (\n    <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={search} />\n        <div className=\"App-playlist\">\n          <SearchResults  searchResults={searchResults} onAdd={addTrack} />\n          <Playlist playlistName={playlistName} playlistTracks={playlistTracks} \n                    onRemove={removeTrack} onNameChange={updatePlaylistName} \n                    onSave={savePlaylist}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}